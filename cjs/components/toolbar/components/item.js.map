{"version":3,"sources":["../../../../src/components/toolbar/components/item.js"],"names":["ToolbarItem","className","active","children","hoverable","renderAs","arrowless","props","as","dropdown","React","Children","toArray","find","child","type","ToolbarDropdown","up","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAQd;AAAA;;AAAA,MAPJC,SAOI,QAPJA,SAOI;AAAA,MANJC,MAMI,QANJA,MAMI;AAAA,MALJC,QAKI,QALJA,QAKI;AAAA,MAJJC,SAII,QAJJA,SAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,MADDC,KACC;;AACJ,MAAIC,EAAE,GAAGH,QAAT;;AAEA,MAAMI,QAAQ,GAAGC,kBAAMC,QAAN,CAAeC,OAAf,CAAuBT,QAAvB,EAAiCU,IAAjC,CAAsC,UAACC,KAAD,EAAW;AAChE,WAAOA,KAAK,CAACC,IAAN,KAAeC,oBAAtB;AACD,GAFgB,CAAjB;;AAIA,MAAIP,QAAQ,IAAIJ,QAAQ,KAAK,GAA7B,EAAkC;AAChCG,IAAAA,EAAE,GAAG,MAAL;AACD;;AACD,sBACE,gCAAC,mBAAD,eACMD,KADN;AAEE,IAAA,QAAQ,EAAEC,EAFZ;AAGE,IAAA,SAAS,EAAE,4BAAW,cAAX,EAA2BP,SAA3B,EAAsC;AAC/C,mBAAaC,MADkC;AAE/C,sBAAgBO,QAF+B;AAG/C,sBAAgBL,SAH+B;AAI/C,yBAAmBK,QAAQ,wBAAIA,QAAQ,CAACF,KAAb,oDAAI,gBAAgBU,EAApB,CAJoB;AAK/C,sBAAgBX;AAL+B,KAAtC;AAHb,MAWGH,QAXH,CADF;AAeD,CAjCD;;AAqDAH,WAAW,CAACkB,YAAZ,GAA2B;AACzBb,EAAAA,QAAQ,EAAE;AADe,CAA3B;eAIeL,W","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport ToolbarDropdown from './dropdown';\n\nimport Element from '../../element';\n\nconst ToolbarItem = ({\n  className,\n  active,\n  children,\n  hoverable,\n  renderAs,\n  arrowless,\n  ...props\n}) => {\n  let as = renderAs;\n\n  const dropdown = React.Children.toArray(children).find((child) => {\n    return child.type === ToolbarDropdown;\n  });\n\n  if (dropdown && renderAs === 'a') {\n    as = 'span';\n  }\n  return (\n    <Element\n      {...props}\n      renderAs={as}\n      className={classnames('toolbar-item', className, {\n        'is-active': active,\n        'has-dropdown': dropdown,\n        'is-hoverable': hoverable,\n        'has-dropdown-up': dropdown && dropdown.props?.up,\n        'is-arrowless': arrowless,\n      })}\n    >\n      {children}\n    </Element>\n  );\n};\n\nToolbarItem.propTypes = {\n  /**\n   * If the item has a dropdown, control if the dropdown is displayed\n   */\n  active: PropTypes.bool,\n  /**\n   * Control if the dropdown should be displayed on mouse over\n   * This prop will be ignored if `active=true`\n   */\n  hoverable: PropTypes.bool,\n  arrowless: PropTypes.bool,\n  renderAs: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n};\n\nToolbarItem.defaultProps = {\n  renderAs: 'a',\n};\n\nexport default ToolbarItem;\n"],"file":"item.js"}